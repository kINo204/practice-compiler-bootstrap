<program>
        : { <func_def> }
        ;

<func_def>
        : <func_type> ident open_par
                [ <var_type> ident { comma <var_type> ident } ]
                close_par open_brac { <statement> } close_brac
        ;

<func_type>
        : <var_type>
        | keyword_void
        ;

<var_type>
        : keyword_int
        : keyword_char
        ;

<statement>
        : <exp> semicolon
        | <block>
        | keyword_return <exp> semicolon
        | <var_type> ident [ assign <exp> ] semicolon
        | keyword_if open_par <exp> close_par <statement> [ keyword_else <statement> ]
        | keyword_while open_par <exp> close_par <statement>
        | keyword_for open_par <statement> <statement> <exp> close_par <statement>
        | keyword_break semicolon
        | keyword_continue semicolon
        ;

<block>
        : open_brac { <statement> } close_brac
        ;

<exp>
        : ident assign <exp>
        | <logical-or-exp>
        ;

<logical-or-exp>
        : <logical-and-exp> { "||" <logical-and-exp> }
        ;

<logical-and-exp>
        : <equality-exp> { "&&" <equality-exp> }
        ;

<equality-exp>
        : <relational-exp> [ ("!=" | "==") <relational-exp> ]
        ;

<relational-exp>
        : <additive-exp> [ ("<" | ">" | "<=" | ">=") <additive-exp> ]
        ;

<additive_exp>
        : <term> { ("+" | "-") <term> }
        ;

<term>
        : <factor> { ("*" | "/") <factor> }
        ;

<factor>
        : open_par <exp> close_par
        | <unary_op> <factor>
        | <literal> 
        | ident
        ;

<unary_op>
        : bit_compl
        | minus
        | negation
        ;


<literal>
        : literal_int
        | literal_hex
        ;
